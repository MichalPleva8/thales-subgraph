type Market @entity {
  id: ID!
  timestamp: BigInt!
  creator: Bytes!
  currencyKey: Bytes!
  strikePrice: BigInt!
  maturityDate: BigInt!
  expiryDate: BigInt!
  isOpen: Boolean!
  poolSize: BigInt!
  longAddress: Bytes!
  shortAddress: Bytes!
  result: Int
  customMarket: Boolean!
  customOracle: Bytes!
}

enum OptionTransactionType {
  mint
  exercise
}

type OptionTransaction @entity {
  id: ID!
  timestamp: BigInt!
  type: OptionTransactionType!
  account: Bytes!
  market: Bytes!
  amount: BigInt!
  currencyKey: Bytes
  side: Int
  fee: BigInt
}

enum OptionSide {
  long
  short
}

enum OrderSide {
  buy
  sell
}

type Trade @entity {
  # tx hash - order hash - log index
  id: ID!
  transactionHash: Bytes!
  timestamp: BigInt!
  orderHash: Bytes!
  maker: Bytes!
  taker: Bytes!
  makerToken: Bytes!
  takerToken: Bytes!
  makerAmount: BigInt!
  takerAmount: BigInt!
  market: Bytes
  optionSide: OptionSide
  orderSide: OrderSide
}

enum TokenTransactionType {
  claimRetroAirdrop
  claimRetroUnlocked
  claimStakingRewards
  stake
  startUnstake
  cancelUnstake
  unstake
  addToEscrow
  vest
}

type TokenTransaction @entity {
  # tx hash - log index
  id: ID!
  transactionHash: Bytes!
  timestamp: BigInt!
  account: Bytes!
  amount: BigInt
  type: TokenTransactionType!
}

type OngoingAirdropNewRoot @entity {
  # tx hash - log index
  id: ID!
  transactionHash: Bytes!
  root: Bytes!
  timestamp: BigInt!
  period: BigInt!
}

type BinaryOption @entity {
  id: ID!
  timestamp: BigInt!
  market: Bytes!
  side: OptionSide
}

type ThalesRoyaleGame @entity {
  id: ID!
  timestamp: BigInt!
  address: Bytes!
}

type ThalesRoyaleRound @entity {
  id: ID!
  timestamp: BigInt!
  game: Bytes!
  round: BigInt!
  totalPlayersPerRound: BigInt!
  eliminatedPerRound: BigInt!
}

type ThalesRoyalePlayer @entity {
  id: ID!
  address: Bytes!
  timestamp: BigInt!
  game: Bytes!
  isAlive: Boolean!
  deathRound: BigInt
}

type ThalesRoyalePosition @entity {
  id: ID!
  timestamp: BigInt!
  game: Bytes!
  player: Bytes!
  round: BigInt!
  position: BigInt!
}
