type SportMarket @entity {
  id: ID!
  timestamp: BigInt!
  address: Bytes!
  maturityDate: BigInt!
  tags: [BigInt!]!
  isOpen: Boolean!
  isResolved: Boolean!
  isCanceled: Boolean!
  finalResult: BigInt!
  poolSize: BigInt!
  numberOfParticipants: BigInt!
  homeTeam: String!
  awayTeam: String!
  homeOdds: BigInt!
  awayOdds: BigInt!
  drawOdds: BigInt!
  homeScore: BigInt
  awayScore: BigInt
}

type SportMarketOddsHistory @entity {
  id: ID!
  timestamp: BigInt!
  address: Bytes!
  maturityDate: BigInt!
  tags: [BigInt!]!
  isOpen: Boolean!
  isResolved: Boolean!
  isCanceled: Boolean!
  finalResult: BigInt!
  poolSize: BigInt!
  numberOfParticipants: BigInt!
  homeTeam: String!
  awayTeam: String!
  homeOdds: [BigInt!]!
  awayOdds: [BigInt!]!
  drawOdds: [BigInt!]!
  homeScore: BigInt
  awayScore: BigInt
}

enum MarketTransactionType {
  buy
  sell
}

type MarketTransaction @entity {
  id: ID!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  type: MarketTransactionType!
  account: Bytes!
  market: Bytes!
  amount: BigInt!
  position: BigInt!
}

enum PositionType {
  home
  away
  draw
}

type Position @entity {
  id: ID!
  market: SportMarket!
  side: PositionType!
  claimable: Boolean!
}

type PositionBalance @entity {
  id: ID!
  account: Bytes!
  amount: BigInt!
  position: Position!
}
