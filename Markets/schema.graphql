type Market @entity {
  id: ID!
  timestamp: BigInt!
  creator: Bytes!
  currencyKey: Bytes!
  strikePrice: BigInt!
  maturityDate: BigInt!
  expiryDate: BigInt!
  isOpen: Boolean!
  poolSize: BigInt!
  longAddress: Bytes!
  shortAddress: Bytes!
  result: Int
  customMarket: Boolean!
  customOracle: Bytes!
  finalPrice: BigInt
}

type RangedMarket @entity {
  id: ID!
  timestamp: BigInt!
  currencyKey: Bytes!
  maturityDate: BigInt!
  expiryDate: BigInt!
  leftPrice: BigInt!
  rightPrice: BigInt!
  inAddress: Bytes!
  outAddress: Bytes!
  rightMarket: Market!
  leftMarket: Market!
  isOpen: Boolean!
  result: Int
  finalPrice: BigInt
}

enum OptionTransactionType {
  mint
  exercise
}

type OptionTransaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  type: OptionTransactionType!
  account: Bytes!
  market: Bytes!
  amount: BigInt!
  currencyKey: Bytes
  side: Int
  isRangedMarket: Boolean!
  fee: BigInt
}

enum OptionSide {
  long
  short
  in
  out
}

enum OrderSide {
  buy
  sell
}

type Trade @entity(immutable: true) {
  # tx hash - order hash - log index
  id: ID!
  transactionHash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  orderHash: Bytes!
  maker: Bytes!
  taker: Bytes!
  makerToken: Bytes!
  takerToken: Bytes!
  makerAmount: BigInt!
  takerAmount: BigInt!
  market: Bytes
  optionSide: OptionSide
  orderSide: OrderSide
}

enum AccountBuyVolumeEnum {
  buyUp
  buyDown
  buyRanged
  buyDiscounted
}

type AccountBuyVolume @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  account: Bytes!
  amount: BigInt!
  type: AccountBuyVolumeEnum!
}

type ReferralTransfer @entity(immutable: true) {
  id: ID!
  refferer: Bytes!
  trader: Bytes!
  amount: BigInt!
  volume: BigInt!
  timestamp: BigInt!
}

type Referrer @entity {
  id: ID!
  trades: BigInt!
  totalVolume: BigInt!
  totalEarned: BigInt!
  timestamp: BigInt!
}

type ReferredTrader @entity {
  id: ID!
  trades: BigInt!
  totalVolume: BigInt!
  totalEarned: BigInt!
  refferer: Referrer!
  timestamp: BigInt!
}

type Position @entity(immutable: true) {
  id: ID!
  market: Market!
  side: OptionSide!
}

type PositionBalance @entity {
  id: ID!
  account: Bytes!
  amount: BigInt!
  position: Position!
}

type RangedPosition @entity(immutable: true) {
  id: ID!
  market: RangedMarket!
  side: OptionSide!
}

type RangedPositionBalance @entity {
  id: ID!
  account: Bytes!
  amount: BigInt!
  position: RangedPosition!
}

type Vault @entity {
  id: ID!
  address: Bytes!
  round: BigInt!
}

type VaultTransaction @entity {
  id: ID!
  vault: Bytes!
  hash: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  market: Bytes!
  amount: BigInt!
  paid: BigInt!
  position: BigInt!
  wholeMarket: Market!
  round: BigInt!
}

type VaultPnl @entity {
  id: ID!
  vault: Bytes!
  timestamp: BigInt!
  round: BigInt!
  pnl: BigInt!
}
