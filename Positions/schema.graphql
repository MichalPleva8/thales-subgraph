type Market @entity {
  id: ID!
  timestamp: BigInt!
  creator: Bytes!
  currencyKey: Bytes!
  strikePrice: BigInt!
  maturityDate: BigInt!
  expiryDate: BigInt!
  isOpen: Boolean!
  poolSize: BigInt!
  longAddress: Bytes!
  shortAddress: Bytes!
  result: Int
  customMarket: Boolean!
  customOracle: Bytes!
  finalPrice: BigInt
}

type RangedMarket @entity {
  id: ID!
  timestamp: BigInt!
  currencyKey: Bytes!
  maturityDate: BigInt!
  expiryDate: BigInt!
  leftPrice: BigInt!
  rightPrice: BigInt!
  inAddress: Bytes!
  outAddress: Bytes!
  rightMarket: Market!
  leftMarket: Market!
  isOpen: Boolean!
  result: Int
  finalPrice: BigInt
}

enum OptionSide {
  long
  short
  in
  out
}

type Position @entity {
  id: ID!
  market: Market!
  side: OptionSide!
}

type PositionBalance @entity {
  id: ID!
  account: Bytes!
  amount: BigInt!
  position: Position!
}

type RangedPosition @entity {
  id: ID!
  market: RangedMarket!
  side: OptionSide!
}

type RangedPositionBalance @entity {
  id: ID!
  account: Bytes!
  amount: BigInt!
  position: RangedPosition!
}
